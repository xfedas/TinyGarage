@page "/collection-list"
@using System.Net.Http.Json
@using TinyGarage.Models
@using TinyGarage.Server.BindingModels
@inject HttpClient httpClient

<h3>Collections </h3>

@if (collections == null)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-sm">
            <thead class="thead-dark">
            <th class="align-middle">Name</th>
            <th class="align-middle">Manufacturer</th>
            <th class="align-middle">Count</th>
            <th class="align-middle">Notes</th>
            <th class="align-middle">Actions</th>
            </thead>
            <tbody>
                @foreach (var collection in collections)
                {
                    <tr @onclick="() => EditCollection(collection)">
                        <td>
                            @if (collection.Id == editableCollection?.Id)
                            {
                                <input type="text" @bind="editableCollection.Name" class="form-control" />
                            }
                            else
                            {
                                @collection.Name
                            }
                        </td>
                        <td>
                            @if (collection.Id == editableCollection?.Id)
                            {
                                <select class="form-control" @bind="editableCollection.ManufacturerId">
                                    @foreach (var manufacturer in manufacturers)
                                    {
                                        <option value="@manufacturer.Id">@manufacturer.Name</option>
                                    }
                                </select>
                            }
                            else
                            {
                                @collection.Manufacturer.Name
                            }
                        </td>
                        <td>
                            @if (collection.Id == editableCollection?.Id)
                            {
                                <input type="text" @bind="editableCollection.TotalCount" class="form-control" />
                            }
                            else
                            {
                                @collection.TotalCount
                            }
                        </td>
                        <td>
                            @if (collection.Id == editableCollection?.Id)
                            {
                                <input type="text" @bind="editableCollection.Notes" class="form-control" />
                            }
                            else
                            {
                                @collection.Notes
                            }
                        </td>
                        <td class="align-middle">
                            @if (collection.Id == editableCollection?.Id)
                            {
                                <button class="btn btn-primary btn-sm" @onclick="SaveChanges"><i class="fa fa-save"></i></button>
                                <button class="btn btn-secondary btn-sm" @onclick="CancelEditing"><i class="fa fa-times"></i></button>
                            }
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="3" style="text-align: center;">
                        <button class="btn btn-success btn-sm" @onclick="AddNewRow"><i class="fa fa-plus"></i> Add New</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

@code {
    private List<ModelCollection> collections;
    private List<ModelCollection> sortedCollections;
    private ModelCollection? editableCollection;
    private List<Manufacturer> manufacturers;
    private string sortColumn;
    private bool ascending = true;
    private string searchTerm;
    private bool isNew = false;

    protected override async Task OnInitializedAsync()
    {
        collections = await httpClient.GetFromJsonAsync<List<ModelCollection>>(ApiRoutes.Collection.GetAll);
        Sort("name");
    }

    private void Sort(string column)
    {
        if (column == sortColumn)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        switch (column)
        {
            case "name":
                sortedCollections = ascending ? collections.OrderBy(g => g.Name).ToList() : collections.OrderByDescending(g => g.Name).ToList();
                break;
            case "manufacturer":
                sortedCollections = ascending ? collections.OrderBy(g => g.Manufacturer.Name).ToList() : collections.OrderByDescending(g => g.Manufacturer.Name).ToList();
                break;
            default:
                sortedCollections = collections;
                break;
        }
    }

    private async void EditCollection(ModelCollection collection)
    {
        editableCollection = collections.First(g => g.Id == collection.Id);
        manufacturers = await httpClient.GetFromJsonAsync<List<Manufacturer>>(ApiRoutes.Manufacturer.GetAll);
    }

    private void CancelEditing()
    {
        editableCollection = null;
        isNew = false;
    }

    private async Task SaveChanges()
    {
        HttpResponseMessage? res;
        if (isNew)
        {
            res = await httpClient.PostAsJsonAsync(ApiRoutes.Collection.Create,
                new ModelCollectionCreateBindingModel()
                    {
                        Name = editableCollection.Name,
                        Notes = editableCollection.Notes,
                        TotalCount = editableCollection.TotalCount,
                        ManufacturerId = editableCollection.ManufacturerId.ToString()
                    });
        }
        else
        {
            res = await httpClient.PostAsJsonAsync(ApiRoutes.Collection.Update, editableCollection);
        }

        if (res.IsSuccessStatusCode)
        {
            // Update the collection in the list
            var index = collections.FindIndex(g => g.Id == editableCollection?.Id);
            if (index != -1)
            {
                collections[index] = editableCollection;
            }
            editableCollection = null;

            isNew = false;
            editableCollection = null;
        }
        else
        {
            // Handle error
        }
    }

    private async Task AddNewRow()
    {
        // Add new row logic
        var newCollection = new ModelCollection();

        manufacturers = await httpClient.GetFromJsonAsync<List<Manufacturer>>(ApiRoutes.Manufacturer.GetAll);
        collections.Add(newCollection); // Add an empty Garage object to the list
        editableCollection = newCollection;
        isNew = true;
    }
}
