@page "/garage-list"
@using System.Net.Http.Json
@using TinyGarage.Models
@using TinyGarage.Server.BindingModels
@inject HttpClient httpClient

<h3>Garage List</h3>

@if (garages == null)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-sm">
            <thead class="thead-dark">
                <th class ="align-middle">Name</th>
                <th class="align-middle"> Description</th>
            <th class="align-middle"></th>
        </thead>
        <tbody>
            @foreach (var garage in garages)
            {
                <tr @onclick="() => EditGarage(garage)">
                    <td>
                        @if (garage.Id == editableGarage?.Id)
                        {
                            <input type="text" @bind="editableGarage.Name" class="form-control" />
                        }
                        else
                        {
                            @garage.Name
                        }
                    </td>
                    <td>
                        @if (garage.Id == editableGarage?.Id)
                        {
                            <input type="text" @bind="editableGarage.Description" class="form-control" />
                        }
                        else
                        {
                            @garage.Description
                        }
                    </td>
                    <td class="align-middle">
                        @if (garage.Id == editableGarage?.Id)
                        {
                                <button class="btn btn-primary btn-sm" @onclick="SaveChanges"><i class="fa fa-save"></i></button>
                                <button class="btn btn-secondary btn-sm" @onclick="CancelEditing"><i class="fa fa-times"></i></button>
                        }
                    </td>
                </tr>
            }
            <tr>
                    <td colspan="3" style="text-align: center;">
                        <button class="btn btn-success btn-sm" @onclick="AddNewRow"><i class="fa fa-plus"></i> Add New</button>
                    </td>
                </tr>
        </tbody>
    </table>
    </div>
}

@code {
    private List<Garage> garages;
    private List<Garage> sortedGarages;
    private List<Garage> filteredGarages;
    private Garage? editableGarage;
    private string sortColumn;
    private bool ascending = true;
    private string searchTerm;
    private bool isNew = false;

    protected override async Task OnInitializedAsync()
    {
        garages = await httpClient.GetFromJsonAsync<List<Garage>>(ApiRoutes.Garage.GetAll);
        Sort("name");
    }

    private void Sort(string column)
    {
        if (column == sortColumn)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        switch (column)
        {
            case "name":
                sortedGarages = ascending ? garages.OrderBy(g => g.Name).ToList() : garages.OrderByDescending(g => g.Name).ToList();
                break;
            case "description":
                sortedGarages = ascending ? garages.OrderBy(g => g.Description).ToList() : garages.OrderByDescending(g => g.Description).ToList();
                break;
            default:
                sortedGarages = garages;
                break;
        }
    }

    private void EditGarage(Garage garage)
    {
        editableGarage = garages.First(g => g.Id == garage.Id);
    }

    private void CancelEditing()
    {
        editableGarage = null;
    }

    private async Task SaveChanges()
    {
        HttpResponseMessage? res;
        if (isNew)
        {
            res = await httpClient.PostAsJsonAsync(ApiRoutes.Garage.Create, 
                new GarageCreateBindingModel()
                    {
                        Name = editableGarage.Name, 
                        Description = editableGarage.Description
                    });
        }
        else
        {
            res = await httpClient.PostAsJsonAsync(ApiRoutes.Garage.Update, editableGarage);
        }
        if (res.IsSuccessStatusCode)
        {
            // Update the garage in the list
            var index = garages.FindIndex(g => g.Id == editableGarage?.Id);
            if (index != -1)
            {
                garages[index] = editableGarage;
            }
            editableGarage = null;

            isNew = false;
            editableGarage = null;
        }
        else
        {
            // Handle error
        }
    }

    private void AddNewRow()
    {
        // Add new row logic
        var newGarage = new Garage();
        garages.Add(newGarage); // Add an empty Garage object to the list
        editableGarage = newGarage;
        isNew = true;
    }
}
